import { Platform } from 'react-native';
import { NativeModule } from '../spec/NativeGoogleSignin';
let configPromise = Promise.resolve();
function configure(options = {}) {
  if (options.offlineAccess && !options.webClientId) {
    throw new Error('RNGoogleSignin: offline use requires server web ClientID');
  }
  configPromise = NativeModule.configure(options);
}
async function signIn(options = {}) {
  await configPromise;
  return await NativeModule.signIn(options);
}
async function hasPlayServices(options = {
  showPlayServicesUpdateDialog: true
}) {
  if (Platform.OS === 'ios') {
    return true;
  } else {
    if (options && options.showPlayServicesUpdateDialog === undefined) {
      throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');
    }
    return NativeModule.playServicesAvailable(options.showPlayServicesUpdateDialog);
  }
}
async function addScopes(options) {
  if (Platform.OS === 'ios') {
    return NativeModule.addScopes(options);
  } else {
    const hasUser = await NativeModule.addScopes(options);
    if (!hasUser) {
      return null;
    }
    // on Android, the user returned in onActivityResult() will contain only the scopes added, not the ones present previously
    // we work around it by calling signInSilently() which returns the user object with all scopes
    return signInSilently();
  }
}
async function signInSilently() {
  await configPromise;
  return NativeModule.signInSilently();
}
async function signOut() {
  return NativeModule.signOut();
}
async function revokeAccess() {
  return NativeModule.revokeAccess();
}
function hasPreviousSignIn() {
  return NativeModule.hasPreviousSignIn();
}
function getCurrentUser() {
  return NativeModule.getCurrentUser();
}
async function clearCachedAccessToken(tokenString) {
  if (!tokenString || typeof tokenString !== 'string') {
    return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');
  }
  return Platform.OS === 'ios' ? null : NativeModule.clearCachedAccessToken(tokenString);
}
async function getTokens() {
  if (Platform.OS === 'ios') {
    return NativeModule.getTokens();
  } else {
    const userObject = await NativeModule.getTokens();
    return {
      idToken: userObject.idToken,
      accessToken: userObject.accessToken
    };
  }
}

/**
 * The entry point of the Google Sign In API, exposed as `GoogleSignin`.
 * @group Original Google sign in
 * */
export const GoogleSignin = {
  hasPlayServices,
  configure,
  signIn,
  addScopes,
  signInSilently,
  signOut,
  revokeAccess,
  hasPreviousSignIn,
  getCurrentUser,
  clearCachedAccessToken,
  getTokens
};
//# sourceMappingURL=GoogleSignin.js.map